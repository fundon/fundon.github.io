<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>锈出未来</title>
        <link>https://fundon.me</link>
        <description>生命第 N 次练习，谢天地赐我逆境！</description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="https://fundon.me/tags/async-await/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Wed, 04 Dec 2019 08:00:00 +0000</lastBuildDate>
        
            <item>
                <title>Async-await on Rust</title>
                <pubDate>Wed, 04 Dec 2019 08:00:00 +0000</pubDate>
                <link>https://fundon.me/async-await-on-rust/</link>
                <guid>https://fundon.me/async-await-on-rust/</guid>
                <description>&lt;p&gt;异步操作，对 &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; 开发者来说已经属于日常操作，家常便饭。
从 &lt;code&gt;Callback&lt;&#x2F;code&gt; 到 &lt;code&gt;Promise&lt;&#x2F;code&gt; 再到 &lt;code&gt;Async-await&lt;&#x2F;code&gt;，一路摆脱了 &lt;code&gt;Callback Hell&lt;&#x2F;code&gt;、&lt;code&gt;Promise Chain&lt;&#x2F;code&gt;，
&lt;code&gt;Async-await&lt;&#x2F;code&gt; 为工程开发带来了极大便利，简直是神兵利器。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Rust&lt;&#x2F;strong&gt; 在 &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2019&#x2F;11&#x2F;07&#x2F;Rust-1.39.0.html&quot;&gt;1.39.0&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; 稳定版中引入了期待已久的 &lt;code&gt;Async-await&lt;&#x2F;code&gt; 语法糖，这是一个伟大的里程碑，🦀 终于可以愉快地爬行了。&lt;&#x2F;p&gt;
&lt;p&gt;不管是 &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; 版还是 &lt;strong&gt;Rust&lt;&#x2F;strong&gt; 版本，两则在设计上还是很多相似之处，可以探索一番。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;javascript&quot;&gt;JavaScript&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_Objects&#x2F;AsyncFunction&quot;&gt;AsyncFunction&lt;&#x2F;a&gt;：用来创建新的异步函数对象&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_Objects&#x2F;Promise&quot;&gt;Promise&lt;&#x2F;a&gt;：对象用于表示一个异步操作的最终完成 (或失败)，及其结果值&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pending&lt;&#x2F;code&gt;：初始状态，既不是成功，也不是失败状态&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;fulfilled&lt;&#x2F;code&gt;：意味着操作成功完成&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;rejected&lt;&#x2F;code&gt;：意味着操作失败&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;可以通过 &lt;code&gt;async function&lt;&#x2F;code&gt; 来声明一个 &lt;code&gt;AsyncFunction&lt;&#x2F;code&gt;，当执行这个 &lt;code&gt;AsyncFunction()&lt;&#x2F;code&gt; 时，
会返回一个 &lt;code&gt;Promise&lt;&#x2F;code&gt;，然后再执行 &lt;code&gt;await Promise&lt;&#x2F;code&gt; 操作，经过计算后，就可以获得最终结果。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;async function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;Hello Async-await&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;async function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;()
  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;rust&quot;&gt;Rust&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;future&#x2F;trait.Future.html&quot;&gt;Future&lt;&#x2F;a&gt;：用来表示一个异步计算&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;beta&#x2F;std&#x2F;task&#x2F;enum.Poll.html&quot;&gt;Poll&lt;&#x2F;a&gt;：类似 &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; 中的 &lt;code&gt;Promise&lt;&#x2F;code&gt;，它是一个枚举类型&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ready&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;：表示结果已经计算完毕，准备妥当，可以立刻返回&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Pending&lt;&#x2F;code&gt;：等待状态，任务进行中，还在计算，结果准备中&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;可以通过 &lt;code&gt;async fn&lt;&#x2F;code&gt;，声明一个异步方法，当执行这个异步方法 &lt;code&gt;fn()&lt;&#x2F;code&gt; 时，会返回一个 &lt;code&gt;Future&lt;&#x2F;code&gt;，然后在执行 &lt;code&gt;Future.await&lt;&#x2F;code&gt; 操作，
创建一个新任务，此时内部真正执行的是 &lt;code&gt;Future.poll()&lt;&#x2F;code&gt;，它会返回一个 &lt;code&gt;Poll&lt;&#x2F;code&gt;，经过计算后，就可以获得最终结果。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;xiao-tie-shi&quot;&gt;小贴士&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果一个异步方法有返回结果 &lt;code&gt;T&lt;&#x2F;code&gt;，则相应的，执行 &lt;code&gt;fn()&lt;&#x2F;code&gt; 时，返回的是 &lt;code&gt;Future&amp;lt;Outout = T&amp;gt;&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;因为返回结果 &lt;code&gt;T&lt;&#x2F;code&gt; 是一个范型，可以在 &lt;code&gt;Future.await&lt;&#x2F;code&gt; 后面加上 &lt;code&gt;?&lt;&#x2F;code&gt; 操作符，&lt;code&gt;Future.await?&lt;&#x2F;code&gt;，它会把结果转化成 &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;&#x2F;code&gt;，
此时我们就可以轻松判断成功或失败，这就与 &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; 中的 &lt;code&gt;Promise#fulfilled&lt;&#x2F;code&gt; 和 &lt;code&gt;Promise#rejected&lt;&#x2F;code&gt; 异曲同工。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#282a36;&quot;&gt;
&lt;span style=&quot;color:#ff79c6;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#66d9ef;&quot;&gt;async_std&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#ff79c6;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;task;

async &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;-&amp;gt; String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;Hello Async-await&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#66d9ef;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#ff79c6;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;block_on(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8be9fd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;await;
        println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;, result);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f8f8f2;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffffff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h3&gt;
&lt;p&gt;以上分析两种语言在 &lt;code&gt;Async-await&lt;&#x2F;code&gt; 的设计、执行流程，在实现上有很多相识之处，如果之前有 &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; 开发经验，则可以轻松地过渡到 &lt;strong&gt;Rust&lt;&#x2F;strong&gt; 中。&lt;&#x2F;p&gt;
&lt;p&gt;总之让我们 🦀 愉快的爬起来。&lt;&#x2F;p&gt;
</description>
            </item>
        
    </channel>
</rss>
